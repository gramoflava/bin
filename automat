#!/bin/zsh
set -e

MSG_REQ_FFMPEG="Error. No 'ffmpeg' found. Try \`brew install ffmpeg\` or updating your \$PATH."
MSG_ERR_NOT_FOUND="Error. Source file not found:"

PRJESR=~/bin/realesrgan-ncnn-vulkan-20220424-macos

check_dependency() {
    command -v "$1" &>/dev/null || { echo "$MSG_REQ_FFMPEG" >&2; exit 1; }
}

find_or_die() {
    [ -f "$1" ] || { echo "$MSG_ERR_NOT_FOUND $1" >&2; exit 1; }
}

refine_video() {
    local source="$1"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    # Re-encode the video using H.264 codec with hardware acceleration
    ffmpeg -i "$source" \
        -vcodec h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) \
        -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -pix_fmt yuv420p \
        -acodec aac -b:a 128k -movflags +faststart \
        -y "${source%.*}.refined.mp4"
}

enhance_video() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -i "$source" \
        -stream_loop -1 -i "$param" -shortest -map 0:v:0 \
        -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) \
        -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "${source%.*}.enhanced.mp4"
}

loop_audio() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -stream_loop -1 -i "$source" -i "$param" -shortest -map 0:v:0 \
        -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) \
        -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "${source%.*}.audio_looped.mp4"
}

combine_audio() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -i "$source" -i "$param" -map 0:v \
        -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) -tune stillimage \
        -map 1:a -c:a aac -pix_fmt yuv420p -shortest -movflags +faststart "${source%.*}.combined_audio.mp4"
}

usage() {
    check_dependency ffmpeg

    cat <<EOT
Usage for videos: \`automat -v [refine|enhance|loop_audio|combine_audio|add_voice] MOVIE [ADD-IN]'

Example 1: Simple integration with Automator
======
export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -v refine "\$f"
done

Example 2: Enhance video with background music
======
export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -v enhance "\$f" "background_music.mp3"
done
EOT
}

main() {
    local kind="$1"
    local op="$2"

    case "$kind" in
        -v)
            local source="$3"
            local param="$4"

            find_or_die "$source"
            check_dependency ffmpeg

            case "$op" in
                refine)
                    refine_video "$source"
                ;;
                enhance)
                    enhance_video "$source" "$param"
                ;;
                loop_audio)
                    loop_audio "$source" "$param"
                ;;
                combine_audio)
                    combine_audio "$source" "$param"
                ;;
                add_voice)
                    combine_audio "$source" "$param"
                ;;
                *)
                    usage; exit 1
                ;;
            esac
        ;;
        *)
            usage; exit 1
        ;;
    esac
}

main "$@"