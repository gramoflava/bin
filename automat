#!/bin/zsh
set -e

MSG_REQ_FFMPEG="Error. No 'ffmpeg' found. Try \`brew install ffmpeg' or updating your \$PATH."
MSG_ERR_NOT_FOUND="Error. Source file not found:"

PRJESR=~/bin/realesrgan-ncnn-vulkan-20220424-macos

check_dependency() {
    command -v "$1" &>/dev/null || { echo "$MSG_REQ_FFMPEG" >&2; exit 1; }
}

move_alpha_images() {
    local file="$1"
    echo "$file"
    if sips -g hasAlpha "$file" | grep -q "hasAlpha: yes"; then
        echo "Moving $file to ~/Downloads/"
        mv "$file" ~/Downloads/
    fi
}

find_or_die() {
    [ -f "$1" ] || { echo "$MSG_ERR_NOT_FOUND $1" >&2; exit 1; }
}

optimize_image_with_esrgan() {
    local original="$1"
    local remove_original="$2"
    local name="${original%.*}"
    local ext="${original##*.}"
    local target_height=3072

    if [ "$remove_original" != "rm" ]; then
        cp "$original" "$name~.$ext"
    fi

    local height
    height=$(sips -g pixelHeight "$original" | awk '/pixelHeight:/ {print $2}')
    local scale_factor=1

    if [ "$height" -lt $(($target_height / 3)) ]; then
        scale_factor=4
    elif [ "$height" -lt $(($target_height / 2)) ]; then
        scale_factor=3
    elif [ "$height" -lt "$target_height" ]; then
        scale_factor=2
    fi

    local source="$original"
    if [ "$scale_factor" -ne 1 ]; then
        source="$name.esrgan.$(xxd -l2 -ps /dev/urandom).png"
        "$PRJESR/realesrgan-ncnn-vulkan" -m "$PRJESR/models" -f png -i "$original" -s "$scale_factor" -o "$source"

        height=$(sips -g pixelHeight "$source" | awk '/pixelHeight:/ {print $2}')
        if [ "$height" -lt "$target_height" ]; then
            optimize_image_with_esrgan "$source" rm
        fi
    fi

    sips "$source" -s format jpeg --resampleHeight "$target_height" --out "$name.h${target_height}.jpg"

    if [ "$remove_original" = "rm" ]; then
        rm -f "$original"
    fi

    rm -f "$source"
    mv "$name.h${target_height}.jpg" "$name.jpg"
}

normalize_image() {
    local source="$1"
    local height
    local width
    height=$(sips -g pixelHeight "$source" | awk '/pixelHeight:/ {print $2}')
    width=$(sips -g pixelWidth "$source" | awk '/pixelWidth:/ {print $2}')
    if sips -g hasAlpha "$source" | grep -q "hasAlpha: no"; then
        sips "$source" -s format jpeg --resampleHeight "$height" --out "${source%.*}.jpg"
    fi
}

usage() {
    check_dependency ffmpeg

    cat <<EOT
Usage for images: \`automat -i [esrgan|photo|normalize_image] IMAGE'
Usage for videos: \`automat -v [refine|enhance|loop_audio|combine_audio|add_voice] MOVIE [ADD-IN]'

Example 1: Simple integration with Automator
======
export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -v refine "\$f"
done

Example 2: Request for parameters
======
read -r -d '' applescriptCode <<'EOF'
    set dialogText to text returned of (display dialog "Denoise level (0-4):" default answer "2")
    return dialogText
EOF
DENOISE=\$(osascript -e "\$applescriptCode");

export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -i denoise "\$f" "\$DENOISE"
done
EOT
}

refine_video() {
    local source="$1"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source")

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    # Re-encode the video using H.264 codec with hardware acceleration
    ffmpeg -i "$source" \
        -vcodec h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize "$((bitrate/2))" \
        -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -pix_fmt yuv420p \
        -acodec aac -b:a 128k -movflags +faststart \
        -y "${source%.*}.refined.mp4"
}


enhance_video() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source")

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -i "$source" -stream_loop -1 -i "$param" -shortest -map 0:v:0 -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize "$((bitrate/2))" -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "${source%.*}.enhanced.mp4"
}

loop_audio() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source")

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -stream_loop -1 -i "$source" -i "$param" -shortest -map 0:v:0 -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize "$((bitrate/2))" -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "${source%.*}.audio_looped.mp4"
}

combine_audio() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source")

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -i "$source" -i "$param" -map 0:v -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize "$((bitrate/2))" -tune stillimage -map 1:a -c:a aac -pix_fmt yuv420p -shortest -movflags +faststart "${source%.*}.combined_audio.mp4"
}

main() {
    local kind="$1"
    local op="$2"

    case "$kind" in
        -i)
            local source="$3"
            local param="$4"

            find_or_die "$source"

            case "$op" in
                esrgan)
                    optimize_image_with_esrgan "$source"
                ;;
                photo)
                    echo "Not yet implemented."
                ;;
                normalize_image)
                    normalize_image "$source" "$param"
                ;;
                *)
                    usage; exit 1
                ;;
            esac
        ;;
        -v)
            local source="$3"
            local param="$4"

            find_or_die "$source"
            check_dependency ffmpeg

            case "$op" in
                refine)
                    refine_video "$source"
                ;;
                enhance)
                    enhance_video "$source" "$param"
                ;;
                loop_audio)
                    loop_audio "$source" "$param"
                ;;
                combine_audio)
                    combine_audio "$source" "$param"
                ;;
                add_voice)
                    combine_audio "$source" "$param"
                ;;
                *)
                    usage; exit 1
                ;;
            esac
        ;;
        *)
            usage; exit 1
        ;;
    esac
}

main "$@"