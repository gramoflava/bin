#!/bin/zsh
set -e

################################################################################
# GLOBAL SETTINGS & ERROR HANDLING
################################################################################
LOG_FILE="/tmp/automat.log"
ENABLE_LOGGING=false
USE_GPU=false
TRASH_MODE=false
SUFFIX="-re"

display_error() {
    local message="$1"
    echo "Error: $message" >&2
    log "ERROR" "$message"
}

log() {
    if [ "$ENABLE_LOGGING" = true ]; then
        local level="$1"
        local message="$2"
        local timestamp
        timestamp=$(date "+%Y-%m-%d %H:%M:%S")
        mkdir -p "$(dirname "$LOG_FILE")"
        touch "$LOG_FILE"
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    fi
}

################################################################################
# HELPER: CHECK IF FILE HAS A VIDEO EXTENSION
################################################################################
is_video_file() {
    local file="$1"
    local ext="${file##*.}"
    ext="$(echo "$ext" | tr '[:upper:]' '[:lower:]')"

    case "$ext" in
        mp4|m4v|mov|mkv|webm|avi|flv|wmv|mpg|mpeg|3gp|ogv|ts|vob|hevc|av1 )
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

################################################################################
# HELPER: CHECK IF FILE HAS AN IMAGE EXTENSION
################################################################################
is_image_file() {
    local file="$1"
    local ext="${file##*.}"
    ext="$(echo "$ext" | tr '[:upper:]' '[:lower:]')"

    case "$ext" in
        jpg|jpeg|png|bmp|gif|tiff|tif|webp|avif|jxl )
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

################################################################################
# RECURSIVE REFINE
################################################################################
refine_recursive() {
    local dir="$1"
    log "INFO" "Recursively refining all video/image files in directory: $dir"

    # Use 'find' to walk through subdirectories:
    #  -type f => only files
    #  -print0 => separate filenames with null char
    #  We skip anything that has '$SUFFIX' in the name (-not -iname "*-re*")
    #  Adjust the pattern if you want a stricter match, e.g. "*${SUFFIX}.*"
    while IFS= read -r -d $'\0' item; do
        # If recognized video, process
        if is_video_file "$item"; then
            log "INFO" "Refining video: $item"
            process_video "$item" "refine" "" "$CODEC" "$OUTPUT_FORMAT"
        # If recognized image, process
        elif is_image_file "$item"; then
            log "INFO" "Refining image: $item"
            process_image "$item"
        fi
    done < <(find "$dir" -type f \
             -not -iname "*${SUFFIX}.*" \
             -print0)
}

################################################################################
# FILE TRASHING
################################################################################
move_to_trash() {
    local file="$1"
    if [ -z "$file" ]; then
        display_error "No file specified for move_to_trash"
        return 1
    fi

    local absolute_path
absolute_path=$(cd "$(dirname "$file")" && pwd)/$(basename "$file")

    # More reliable approach to move to trash:
    osascript <<EOF
        try
            tell application "Finder"
                move POSIX file "$absolute_path" to trash
            end tell
        on error errMsg number errNum
            do shell script "echo 'Error: " & errMsg & " (Error Number: " & errNum & ")' >&2"
        end try
EOF

    if [ $? -eq 0 ]; then
        log "INFO" "Moved file to trash: $file"
        echo "Moved file to trash: $file"
    else
        display_error "Failed to move file to trash: $file"
        return 1
    fi
}

################################################################################
# VIDEO INFORMATION & BITRATE CALC
################################################################################
get_video_info() {
    local source="$1"
    local info
    info=$(ffprobe -v quiet -print_format json -show_format -show_streams "$source")

    local width height duration bitrate filesize
    width=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .width')
    height=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .height')
    duration=$(echo "$info" | jq -r '.format.duration')
    bitrate=$(echo "$info" | jq -r '.format.bit_rate')
    filesize=$(stat -f %z "$source")

    # Default fallback
    width=${width:-0}
    height=${height:-0}
    duration=${duration:-0}
    bitrate=${bitrate:-0}

    log "INFO" "Video info for '$source' => Width: $width, Height: $height, Duration: $duration, Bitrate: $bitrate, Filesize: $filesize"

    echo "$width $height $duration $bitrate $filesize"
}

calculate_optimal_bitrate() {
    local width="$1"
    local height="$2"
    local current_bitrate="$3"   # bits/s from ffprobe
    local filesize="$4"          # bytes
    local duration="$5"          # seconds

    # 1) Lower baseline bitrates for each resolution tier.
    local pixels=$((width * height))
    local base_bitrate
    if [ "$pixels" -ge 8294400 ]; then   # ~ UHD 4K (3840x2160)
        base_bitrate=6000000      # 6 Mbps
    elif [ "$pixels" -gt 2073600 ]; then # 1080p
        base_bitrate=4000000      # 4 Mbps
    elif [ "$pixels" -gt 921600 ]; then  # 720p
        base_bitrate=2500000      # 2.5 Mbps
    else
        base_bitrate=1200000      # 1.2 Mbps for lower resolutions
    fi

    # 2) If the current bitrate is lower than base, prefer the smaller one.
    local chosen_bitrate="$base_bitrate"
    if [ "$current_bitrate" -ne 0 ] && [ "$current_bitrate" -lt "$base_bitrate" ]; then
        chosen_bitrate="$current_bitrate"
    fi

    # 3) File-size-based approach:
    #    - Calculate actual average from filesize
    #    - Use a "reduce_factor" to shrink further if it’s clearly bloated
    if [ "$duration" != "0" ]; then
        local actual_bitrate_from_filesize
        actual_bitrate_from_filesize=$((filesize * 8 / duration))   # bits/s

        # More aggressive shrink:
        local reduce_factor=0.80

        local target_bitrate
        target_bitrate=$(awk -v ab="$actual_bitrate_from_filesize" -v rf="$reduce_factor" \
            'BEGIN { printf "%d", ab * rf }')

        if [ "$target_bitrate" -lt "$chosen_bitrate" ] && [ "$target_bitrate" -gt 0 ]; then
            chosen_bitrate="$target_bitrate"
        fi
    fi

    # 4) Floor at 100 kb/s (100000 bits/s)
    [ "$chosen_bitrate" -lt 100000 ] && chosen_bitrate=100000

    # 5) Round to nearest 100k bits
    chosen_bitrate=$(((chosen_bitrate + 50000) / 100000 * 100000))

    log "INFO" "Calculated optimal bitrate: $chosen_bitrate (bits/s)"
    echo "$chosen_bitrate"
}

################################################################################
# FFmpeg Command Construction
################################################################################
build_ffmpeg_command() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local output_format="$5"
    local new_bitrate="$6"  # in bits/second
    local thread_count=8

    # Common video filter (round resolution to even)
    local video_filter="scale=trunc(iw/2)*2:trunc(ih/2)*2"

    # We'll separate input-specific and output-specific options for clarity.
    local ffmpeg_input_opts="-hwaccel videotoolbox"         # Must go BEFORE -i
    local ffmpeg_output_opts="-threads $thread_count -movflags +faststart -pix_fmt yuv420p"

    # Convert from bits to kilobits (e.g. 3,000,000 → 3000k)
    local kbps=$(( new_bitrate / 1024 ))

    # Pick codec logic
    case "$codec" in
        h264)
            ffmpeg_output_opts+=" -c:v h264_videotoolbox -b:v ${kbps}k -tag:v avc1"
            ;;
        hevc)
            ffmpeg_output_opts+=" -c:v hevc_videotoolbox -b:v ${kbps}k -tag:v hvc1"
            ;;
        av1)
            ffmpeg_output_opts+=" -c:v libaom-av1 -crf 30 -b:v 0 -strict experimental"
            ;;
        *)
            display_error "Invalid codec: $codec"
            exit 1
            ;;
    esac

    # Container / format handling
    case "$output_format" in
        mp4|m4v)
            # nothing special
            ;;
        mkv)
            ffmpeg_output_opts+=" -f matroska"
            ;;
        webm)
            if [ "$codec" != "av1" ]; then
                # If user picks webm + h264 or hevc, override with VP9
                ffmpeg_output_opts="-c:v libvpx-vp9 -crf 30 -b:v 0 -f webm"
            else
                ffmpeg_output_opts+=" -f webm"
            fi
            ;;
        mov)
            # nothing special
            ;;
        *)
            display_error "Invalid output format: $output_format"
            exit 1
            ;;
    esac

    # Final output name
    local output="${source%.*}${SUFFIX}.${output_format}"

    #
    # Build the FFmpeg command step by step
    #
    
    # 1) Base command with input options BEFORE -i
    local ffmpeg_cmd="ffmpeg $ffmpeg_input_opts -i \"$source\""

    case "$operation" in
        refine)
            # single-input usage
            ffmpeg_cmd+=" $ffmpeg_output_opts -vf \"$video_filter\" -c:a aac -b:a 128k"
            ;;
        amv|loop_audio)
            # For these, we have a second input (audio?), but we only need hardware decode for the first input’s video
            # so it’s fine if we do:  -i "$source"  -i "$param"
            ffmpeg_cmd="ffmpeg $ffmpeg_input_opts -i \"$source\" -i \"$param\""
            ffmpeg_cmd+=" -shortest -map 0:v:0 -map 1:a:0"
            ffmpeg_cmd+=" $ffmpeg_output_opts -vf \"$video_filter\" -c:a aac -b:a 192k"
            ;;
        audiofy)
            # For audiofy, we have a looping image or something similar
            ffmpeg_cmd="ffmpeg $ffmpeg_input_opts -loop 1 -framerate 25 -i \"$source\" -i \"$param\""
            ffmpeg_cmd+=" $ffmpeg_output_opts -vf \"$video_filter\""
            ffmpeg_cmd+=" -map 0:v -map 1:a -c:a aac -b:a 192k -shortest"
            ;;
        *)
            display_error "Invalid operation: $operation"
            exit 1
            ;;
    esac

    # 2) Finally, add overwrite + output file
    ffmpeg_cmd+=" -y \"$output\""

    # Return the whole command
    echo "$ffmpeg_cmd"
}

################################################################################
# MAIN VIDEO PROCESSING
################################################################################
process_video() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local output_format="$5"

    # Gather video info
    local video_info
    video_info=$(get_video_info "$source")
    local width height duration bitrate filesize
    read -r width height duration bitrate filesize <<< "$video_info"

    # Calculate new bitrate
    local new_bitrate
    new_bitrate=$(calculate_optimal_bitrate "$width" "$height" "$bitrate" "$filesize" "$duration")

    # Build FFmpeg command
    local cmd
    cmd=$(build_ffmpeg_command "$source" "$operation" "$param" "$codec" "$output_format" "$new_bitrate")
    log "INFO" "FFmpeg command: $cmd"

    # Run FFmpeg
    if ! eval "$cmd" >> "$LOG_FILE" 2>&1; then
        display_error "FFmpeg command failed. Check log file for details."
        exit 1
    fi

    # Validate output
    local output="${source%.*}${SUFFIX}.${output_format}"
    if [ ! -s "$output" ]; then
        display_error "Output file is empty or missing."
        exit 1
    fi

    # Trash original if requested
    if [ "$TRASH_MODE" = true ]; then
        move_to_trash "$source"
    fi
}

################################################################################
# IMAGE PROCESSING
################################################################################
process_image() {
    local source="$1"
    local output="${source%.*}${SUFFIX}.heic"

    local cmd="sips -s format heic \"$source\" --out \"$output\""

    log "INFO" "Image refine command: $cmd"

    if ! eval "$cmd" >> "$LOG_FILE" 2>&1; then
        display_error "Image refine command failed. Check log file for details."
        exit 1
    fi

    # Validate output
    if [ ! -s "$output" ]; then
        display_error "HEIC output file is empty or missing."
        exit 1
    fi

    # Optionally trash original if requested
    if [ "$TRASH_MODE" = true ]; then
        move_to_trash "$source"
    fi
}

################################################################################
# USAGE
################################################################################
usage() {
    cat <<EOF
Usage: automat [OPTIONS] <operation> <source> [additional_file]

Operations:
  refine, amv, loop_audio, audiofy

If 'refine' and <source> is a directory, all video/image files (one level deep) will be refined.

Options:
  -v              Verbose logging
  -c <codec>      Codec: h264, hevc, av1 (default: hevc) for videos
  -g              Use GPU if available (video only)
  -f <format>     Video container: mp4, m4v, mkv, webm, mov (default: mov)
  -l              Enable logging
  -t              Trash original file after processing

Examples:
    automat refine video.mp4
    automat -c h264 refine video.mp4
    automat -v -c h264 -f mkv refine video.mp4
    automat refine /path/to/videos/
    automat amv video.mp4 audio.mp3
    automat loop_audio video.mp4 audio.mp3
    automat audiofy image.jpg audio.mp3

Automator example (for Finder right-click):
    source ~/.zshrc
    for f in "\$@"; do
        ~/bin/automat -t refine "\$f"
    done

EOF
}

################################################################################
# ENTRYPOINT
################################################################################
main() {
    local codec="hevc"
    local output_format="mov"

    while getopts ":vc:gf:lt" opt; do
        case "$opt" in
            v ) ENABLE_LOGGING=true ;;
            c ) codec=$OPTARG ;;
            g ) USE_GPU=true ;;
            f ) output_format=$OPTARG ;;
            l ) ENABLE_LOGGING=true ;;
            t ) TRASH_MODE=true ;;
            \? )
                display_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            : )
                display_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    local operation="$1"
    local source="$2"
    local param="$3"

    # Basic checks
    [ -z "$operation" ] && { display_error "No operation specified."; usage; exit 1; }
    [ -z "$source" ] && { display_error "No source file specified."; usage; exit 1; }

    # Expose global variables so refine_batch() can see them
    CODEC="$codec"
    OUTPUT_FORMAT="$output_format"

    case "$operation" in
        refine)
            if [ -d "$source" ]; then
                # Recursively process all subdirectories
                refine_recursive "$source"
            else
                # Single-file refine
                [ ! -f "$source" ] && {
                    display_error "Source file not found: $source"
                    exit 1
                }
                if is_video_file "$source"; then
                    process_video "$source" "$operation" "$param" "$codec" "$output_format"
                elif is_image_file "$source"; then
                    process_image "$source"
                else
                    display_error "Unsupported file type for refine: $source"
                    exit 1
                fi
            fi
            ;;
        amv|loop_audio|audiofy)
            [ -z "$param" ] && { display_error "Additional file not specified for '$operation'."; usage; exit 1; }
            [ ! -f "$param" ] && { display_error "Additional file not found: $param"; exit 1; }
            [ ! -f "$source" ] && { display_error "Source file not found: $source"; exit 1; }
            process_video "$source" "$operation" "$param" "$codec" "$output_format"
            ;;
        *)
            display_error "Invalid operation: $operation"
            usage
            exit 1
            ;;
    esac

    log "INFO" "Operation completed successfully."
    if [ "$ENABLE_LOGGING" = true ]; then
        echo "Log file is at $LOG_FILE"
    fi
}

main "$@"