#!/bin/zsh

################################################################################
# GLOBAL SETTINGS & ERROR HANDLING
################################################################################
LOG_FILE="/tmp/automat.log"
ENABLE_LOGGING=false
USE_GPU=false
TRASH_MODE=false
SUFFIX="-re"
DEBUG_MODE=false

display_error() {
    local message="$1"
    echo "Error: $message" >&2
    log "ERROR" "$message"
}

display_info() {
    local message="$1"
    echo "$message"
    log "INFO" "$message"
}

display_debug() {
    local message="$1"
    if [ "$DEBUG_MODE" = true ]; then
        echo "Debug: $message"
    fi
    log "DEBUG" "$message"
}

log() {
    if [ "$ENABLE_LOGGING" = true ]; then
        local level="$1"
        local message="$2"
        local timestamp
        timestamp=$(date "+%Y-%m-%d %H:%M:%S")
        mkdir -p "$(dirname "$LOG_FILE")"
        touch "$LOG_FILE"
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    fi
}

################################################################################
# HELPER: CHECK IF FILE HAS A VIDEO EXTENSION
################################################################################
is_video_file() {
    local file="$1"
    local ext="${file##*.}"
    ext="$(echo "$ext" | tr '[:upper:]' '[:lower:]')"

    case "$ext" in
        mp4|m4v|mov|mkv|webm|avi|flv|wmv|mpg|mpeg|3gp|ogv|ts|vob|hevc|av1 )
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

################################################################################
# HELPER: CHECK IF FILE HAS AN IMAGE EXTENSION
################################################################################
is_image_file() {
    local file="$1"
    local ext="${file##*.}"
    ext="$(echo "$ext" | tr '[:upper:]' '[:lower:]')"

    case "$ext" in
        jpg|jpeg|png|bmp|gif|tiff|tif|webp|avif|jxl )
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

################################################################################
# RECURSIVE REFINE - IMPROVED VERSION
################################################################################
refine_recursive() {
    local dir="$1"
    local codec="$2"
    local output_format="$3"
    
    display_info "Recursively refining all video/image files in directory: $dir"
    log "INFO" "Using codec: $codec, output format: $output_format"
    
    # Count total files to process
    local total_files=0
    local processed_files=0
    local failed_files=0
    
    while IFS= read -r -d $'\0' item; do
        if is_video_file "$item" || is_image_file "$item"; then
            total_files=$((total_files + 1))
        fi
    done < <(find "$dir" -type f -not -iname "*${SUFFIX}.*" -print0)
    
    display_info "Found $total_files files to process"
    
    # Process files with proper progress tracking
    find "$dir" -type f -not -iname "*${SUFFIX}.*" -print0 | while IFS= read -r -d $'\0' item; do
        if is_video_file "$item"; then
            processed_files=$((processed_files + 1))
            display_info "[$processed_files/$total_files] Processing video: $item"
            log "INFO" "Processing video file: $item"
            
            if process_video "$item" "refine" "" "$codec" "$output_format"; then
                display_info "✓ Successfully processed: $item"
            else
                failed_files=$((failed_files + 1))
                display_error "✗ Failed to process: $item"
                # Continue processing other files regardless of error
            fi
        elif is_image_file "$item"; then
            processed_files=$((processed_files + 1))
            display_info "[$processed_files/$total_files] Processing image: $item"
            log "INFO" "Processing image file: $item"
            
            if process_image "$item"; then
                display_info "✓ Successfully processed: $item"
            else
                failed_files=$((failed_files + 1))
                display_error "✗ Failed to process: $item"
                # Continue processing other files regardless of error
            fi
        fi
    done
    
    display_info "Processing complete. Processed: $processed_files, Failed: $failed_files"
    return 0
}

################################################################################
# FILE TRASHING - IMPROVED WITH BETTER ERROR HANDLING
################################################################################
move_to_trash() {
    local file="$1"
    if [ -z "$file" ]; then
        display_error "No file specified for move_to_trash"
        return 1
    fi

    # Check if file exists before attempting to trash it
    if [ ! -f "$file" ]; then
        display_error "File not found for trashing: $file"
        return 1
    fi

    local absolute_path
    absolute_path=$(cd "$(dirname "$file")" && pwd)/$(basename "$file")
    
    display_debug "Attempting to trash file: $absolute_path"

    local trash_result
    trash_result=$(osascript <<EOF 2>&1
        try
            tell application "Finder"
                move POSIX file "$absolute_path" to trash
            end tell
            return "success"
        on error errMsg number errNum
            return "error:" & errMsg & ":" & errNum
        end try
EOF
    )

    if [[ "$trash_result" == "success" ]]; then
        log "INFO" "Moved file to trash: $file"
        display_debug "Moved file to trash: $file"
        return 0
    else
        display_error "Failed to move file to trash: $file ($trash_result)"
        # Don't fail the overall process just because trashing failed
        # We'll consider the processing successful even if trash fails
        return 0
    fi
}

################################################################################
# VIDEO INFORMATION & BITRATE CALC
################################################################################
get_video_info() {
    local source="$1"
    display_debug "Getting video info for: $source"
    
    local info
    info=$(ffprobe -v quiet -print_format json -show_format -show_streams "$source")
    
    if [ $? -ne 0 ]; then
        display_error "Failed to get video info with ffprobe: $source"
        # Return default values
        echo "0 0 0 0 0"
        return 1
    fi

    local width height duration bitrate filesize
    width=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .width')
    height=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .height')
    duration=$(echo "$info" | jq -r '.format.duration')
    bitrate=$(echo "$info" | jq -r '.format.bit_rate')
    filesize=$(stat -f %z "$source")

    # Default fallback with more informative logging
    if [ "$width" = "null" ] || [ -z "$width" ]; then
        display_debug "Width not found in video metadata, using default value"
        width=0
    fi
    if [ "$height" = "null" ] || [ -z "$height" ]; then
        display_debug "Height not found in video metadata, using default value"
        height=0
    fi
    if [ "$duration" = "null" ] || [ -z "$duration" ]; then
        display_debug "Duration not found in video metadata, using default value"
        duration=0
    fi
    if [ "$bitrate" = "null" ] || [ -z "$bitrate" ]; then
        display_debug "Bitrate not found in video metadata, using default value"
        bitrate=0
    fi

    log "INFO" "Video info for '$source' => Width: $width, Height: $height, Duration: $duration, Bitrate: $bitrate, Filesize: $filesize"
    echo "$width $height $duration $bitrate $filesize"
}

calculate_optimal_bitrate() {
    local width="$1"
    local height="$2"
    local current_bitrate="$3"   # bits/s from ffprobe
    local filesize="$4"          # bytes
    local duration="$5"          # seconds

    display_debug "Calculating optimal bitrate for video: ${width}x${height}, current: ${current_bitrate}bit/s, size: ${filesize}bytes, duration: ${duration}s"

    # 1) Lower baseline bitrates for each resolution tier.
    local pixels=$((width * height))
    local base_bitrate
    if [ "$pixels" -ge 8294400 ]; then   # ~ 4K
        base_bitrate=6000000   # 6 Mbps
    elif [ "$pixels" -gt 2073600 ]; then # ~ 1080p
        base_bitrate=4000000   # 4 Mbps
    elif [ "$pixels" -gt 921600 ]; then  # ~ 720p
        base_bitrate=2500000   # 2.5 Mbps
    else
        base_bitrate=1200000   # 1.2 Mbps
    fi

    # 2) If current bitrate is lower than base, prefer that smaller one.
    local chosen_bitrate="$base_bitrate"
    if [ "$current_bitrate" -ne 0 ] && [ "$current_bitrate" -lt "$base_bitrate" ]; then
        chosen_bitrate="$current_bitrate"
        display_debug "Using current bitrate ($current_bitrate) as it's lower than base bitrate ($base_bitrate)"
    fi

    # 3) File-size-based approach:
    if [ "$duration" != "0" ]; then
        local actual_bitrate_from_filesize=$((filesize * 8 / duration)) # bits/s
        local reduce_factor=0.80
        local target_bitrate
        target_bitrate=$(awk -v ab="$actual_bitrate_from_filesize" -v rf="$reduce_factor" \
            'BEGIN { printf "%d", ab * rf }')

        if [ "$target_bitrate" -lt "$chosen_bitrate" ] && [ "$target_bitrate" -gt 0 ]; then
            chosen_bitrate="$target_bitrate"
            display_debug "Using target bitrate ($target_bitrate) based on filesize analysis"
        fi
    fi

    # Floor at 100 kb/s (100000 bits/s)
    [ "$chosen_bitrate" -lt 100000 ] && chosen_bitrate=100000

    # Round to nearest 100k bits
    chosen_bitrate=$(((chosen_bitrate + 50000) / 100000 * 100000))

    log "INFO" "Calculated optimal bitrate: $chosen_bitrate (bits/s)"
    echo "$chosen_bitrate"
}

################################################################################
# FFmpeg Command Construction
################################################################################
build_ffmpeg_command() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local output_format="$5"
    local new_bitrate="$6"  # bits/s
    local thread_count=8

    display_debug "Building FFmpeg command for: $source, operation: $operation, codec: $codec, format: $output_format, bitrate: $new_bitrate"

    # Common video filter
    local video_filter="scale=trunc(iw/2)*2:trunc(ih/2)*2"

    local ffmpeg_input_opts="-hwaccel videotoolbox"
    local ffmpeg_output_opts="-threads $thread_count -movflags +faststart -pix_fmt yuv420p"

    # Convert bits/s to kbps
    local kbps=$(( new_bitrate / 1024 ))

    # Codec logic
    case "$codec" in
        h264)
            ffmpeg_output_opts+=" -c:v h264_videotoolbox -b:v ${kbps}k -tag:v avc1"
            ;;
        hevc)
            ffmpeg_output_opts+=" -c:v hevc_videotoolbox -b:v ${kbps}k -tag:v hvc1"
            ;;
        av1)
            ffmpeg_output_opts+=" -c:v libaom-av1 -crf 30 -b:v 0 -strict experimental"
            ;;
        *)
            display_error "Invalid codec: $codec"
            return 1
            ;;
    esac

    # Container / format
    case "$output_format" in
        mp4|m4v)
            # no special flags needed
            ;;
        mkv)
            ffmpeg_output_opts+=" -f matroska"
            ;;
        webm)
            if [ "$codec" != "av1" ]; then
                # If user picks webm + h264 or hevc, override with VP9
                ffmpeg_output_opts="-c:v libvpx-vp9 -crf 30 -b:v 0 -f webm"
            else
                ffmpeg_output_opts+=" -f webm"
            fi
            ;;
        mov)
            # no special flags needed
            ;;
        *)
            display_error "Invalid output format: $output_format"
            return 1
            ;;
    esac

    local output="${source%.*}${SUFFIX}.${output_format}"
    
    # Check if output file already exists
    if [ -f "$output" ]; then
        display_debug "Output file already exists: $output"
    fi

    local ffmpeg_cmd=""
    case "$operation" in
        refine)
            ffmpeg_cmd="ffmpeg $ffmpeg_input_opts -i \"$source\" $ffmpeg_output_opts -vf \"$video_filter\" -c:a aac -b:a 128k -y \"$output\""
            ;;
        amv|loop_audio)
            ffmpeg_cmd="ffmpeg $ffmpeg_input_opts -i \"$source\" -i \"$param\" \
                -shortest -map 0:v:0 -map 1:a:0 \
                $ffmpeg_output_opts -vf \"$video_filter\" -c:a aac -b:a 192k -y \"$output\""
            ;;
        audiofy)
            ffmpeg_cmd="ffmpeg $ffmpeg_input_opts -loop 1 -framerate 25 -i \"$source\" -i \"$param\" \
                $ffmpeg_output_opts -vf \"$video_filter\" \
                -map 0:v -map 1:a -c:a aac -b:a 192k -shortest -y \"$output\""
            ;;
        *)
            display_error "Invalid operation: $operation"
            return 1
            ;;
    esac

    echo "$ffmpeg_cmd"
}

################################################################################
# MAIN VIDEO PROCESSING - IMPROVED ERROR HANDLING
################################################################################
process_video() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local output_format="$5"
    
    display_debug "Starting video processing for: $source"

    # Gather video info
    local video_info
    video_info=$(get_video_info "$source")
    local width height duration bitrate filesize
    read -r width height duration bitrate filesize <<< "$video_info"

    # Calculate new bitrate
    local new_bitrate
    new_bitrate=$(calculate_optimal_bitrate "$width" "$height" "$bitrate" "$filesize" "$duration")

    # Build FFmpeg command
    local cmd
    cmd=$(build_ffmpeg_command "$source" "$operation" "$param" "$codec" "$output_format" "$new_bitrate") || {
        display_error "FFmpeg command construction failed."
        return 1
    }
    log "INFO" "FFmpeg command: $cmd"
    display_debug "Executing FFmpeg command"

    # Create temp log file for this operation
    local temp_log
    temp_log=$(mktemp /tmp/automat_ffmpeg.XXXXXX)
    
    # Run FFmpeg with better error handling
    if ! eval "$cmd" > "$temp_log" 2>&1; then
        display_error "FFmpeg command failed. Check log for details."
        cat "$temp_log" >> "$LOG_FILE"
        rm "$temp_log"
        return 1
    fi
    
    # Add FFmpeg output to main log if needed
    if [ "$DEBUG_MODE" = true ]; then
        cat "$temp_log" >> "$LOG_FILE"
    fi
    rm "$temp_log"

    # Validate output
    local output="${source%.*}${SUFFIX}.${output_format}"
    if [ ! -s "$output" ]; then
        display_error "Output file is empty or missing: $output"
        return 1
    fi
    
    display_debug "Successfully created output file: $output"

    # Get file sizes for reporting
    local source_size original_size_mb output_size output_size_mb reduction
    source_size=$(stat -f %z "$source")
    original_size_mb=$(awk "BEGIN {printf \"%.2f\", $source_size/1024/1024}")
    output_size=$(stat -f %z "$output")
    output_size_mb=$(awk "BEGIN {printf \"%.2f\", $output_size/1024/1024}")
    reduction=$(awk "BEGIN {printf \"%.1f\", (1-$output_size/$source_size)*100}")
    
    display_info "File size: $original_size_mb MB → $output_size_mb MB ($reduction% reduction)"

    # Trash original if requested - BUT don't fail if trashing fails
    if [ "$TRASH_MODE" = true ]; then
        display_debug "Attempting to trash original file"
        move_to_trash "$source"
        # Note: We intentionally don't check the return code here
    fi

    display_debug "Video processing complete for: $source"
    return 0
}

################################################################################
# IMAGE PROCESSING - IMPROVED ERROR HANDLING
################################################################################
process_image() {
    local source="$1"
    local output="${source%.*}${SUFFIX}.heic"
    
    display_debug "Starting image processing for: $source"

    # Check if output already exists
    if [ -f "$output" ]; then
        display_debug "Output file already exists: $output"
    fi

    local cmd="sips -s format heic \"$source\" --out \"$output\""
    log "INFO" "Image refine command: $cmd"
    
    # Create temp log file for this operation
    local temp_log
    temp_log=$(mktemp /tmp/automat_sips.XXXXXX)

    if ! eval "$cmd" > "$temp_log" 2>&1; then
        display_error "Image refine command failed. Check log for details."
        cat "$temp_log" >> "$LOG_FILE"
        rm "$temp_log"
        return 1
    fi
    
    # Add sips output to main log if needed
    if [ "$DEBUG_MODE" = true ]; then
        cat "$temp_log" >> "$LOG_FILE"
    fi
    rm "$temp_log"

    if [ ! -s "$output" ]; then
        display_error "HEIC output file is empty or missing: $output"
        return 1
    fi
    
    # Get file sizes for reporting
    local source_size original_size_kb output_size output_size_kb reduction
    source_size=$(stat -f %z "$source")
    original_size_kb=$(awk "BEGIN {printf \"%.2f\", $source_size/1024}")
    output_size=$(stat -f %z "$output")
    output_size_kb=$(awk "BEGIN {printf \"%.2f\", $output_size/1024}")
    reduction=$(awk "BEGIN {printf \"%.1f\", (1-$output_size/$source_size)*100}")
    
    display_info "File size: $original_size_kb KB → $output_size_kb KB ($reduction% reduction)"

    if [ "$TRASH_MODE" = true ]; then
        display_debug "Attempting to trash original image"
        move_to_trash "$source"
        # Note: We intentionally don't check the return code here
    fi

    display_debug "Image processing complete for: $source"
    return 0
}

################################################################################
# USAGE
################################################################################
usage() {
    cat <<EOF
Usage: automat [OPTIONS] <operation> <source> [additional_file]

Operations:
  refine, amv, loop_audio, audiofy

If 'refine' and <source> is a directory, all video/image files will be recursively processed.

Options:
  -v              Verbose logging
  -c <codec>      Codec: h264, hevc, av1 (default: hevc) for videos
  -g              Use GPU if available (video only)
  -f <format>     Video container: mp4, m4v, mkv, webm, mov (default: mov)
  -l              Enable logging
  -t              Trash original file after processing
  -d              Debug mode (extra verbose logging)

Examples:
    automat refine video.mp4
    automat -c h264 refine video.mp4
    automat -v -c h264 -f mkv refine video.mp4
    automat refine /path/to/videos/
    automat amv video.mp4 audio.mp3
    automat loop_audio video.mp4 audio.mp3
    automat audiofy image.jpg audio.mp3

Automator example (for Finder right-click):
source ~/.zshrc
for f in "\$@"; do
    ~/bin/automat -t refine "\$f"
done

EOF
}

################################################################################
# ENTRYPOINT
################################################################################
main() {
    local codec="hevc"
    local output_format="mov"

    while getopts ":vc:gf:ltd" opt; do
        case "$opt" in
            v ) ENABLE_LOGGING=true ;;
            c ) codec=$OPTARG ;;
            g ) USE_GPU=true ;;
            f ) output_format=$OPTARG ;;
            l ) ENABLE_LOGGING=true ;;
            t ) TRASH_MODE=true ;;
            d ) DEBUG_MODE=true; ENABLE_LOGGING=true ;;
            \? )
                display_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            : )
                display_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    local operation="$1"
    local source="$2"
    local param="$3"

    [ -z "$operation" ] && { display_error "No operation specified."; usage; exit 1; }
    [ -z "$source" ] && { display_error "No source file specified."; usage; exit 1; }

    # These need to be exported for the subshell in the refine_recursive function
    export CODEC="$codec"
    export OUTPUT_FORMAT="$output_format"
    export TRASH_MODE="$TRASH_MODE"
    export ENABLE_LOGGING="$ENABLE_LOGGING"
    export DEBUG_MODE="$DEBUG_MODE"
    export LOG_FILE="$LOG_FILE"
    export SUFFIX="$SUFFIX"

    display_debug "Starting automat with operation: $operation, source: $source"
    display_debug "Settings: codec=$codec, format=$output_format, trash=$TRASH_MODE, log=$ENABLE_LOGGING"

    case "$operation" in
        refine)
            if [ -d "$source" ]; then
                # Directory mode - process files recursively
                refine_recursive "$source" "$codec" "$output_format"
            else
                # Single-file refine
                [ ! -f "$source" ] && {
                    display_error "Source file not found: $source"
                    exit 1
                }

                if is_video_file "$source"; then
                    process_video "$source" "$operation" "$param" "$codec" "$output_format" || exit 1
                elif is_image_file "$source"; then
                    process_image "$source" || exit 1
                else
                    display_error "Unsupported file type for refine: $source"
                    exit 1
                fi
            fi
            ;;
        amv|loop_audio|audiofy)
            [ -z "$param" ] && {
                display_error "Additional file not specified for '$operation'."
                usage
                exit 1
            }
            [ ! -f "$param" ] && {
                display_error "Additional file not found: $param"
                exit 1
            }
            [ ! -f "$source" ] && {
                display_error "Source file not found: $source"
                exit 1
            }
            # Single-file or single + extra file scenario
            process_video "$source" "$operation" "$param" "$codec" "$output_format" || exit 1
            ;;
        *)
            display_error "Invalid operation: $operation"
            usage
            exit 1
            ;;
    esac

    display_info "Operation completed successfully."
    if [ "$ENABLE_LOGGING" = true ]; then
        echo "Log file is at $LOG_FILE"
    fi
}

main "$@"