#!/bin/zsh
set -e

################################################################################
# GLOBAL SETTINGS & ERROR HANDLING
################################################################################
LOG_FILE="/tmp/automat.log"
ENABLE_LOGGING=false
USE_GPU=false
TRASH_MODE=false

display_error() {
    local message="$1"
    echo "Error: $message" >&2
    log "ERROR" "$message"
}

log() {
    if [ "$ENABLE_LOGGING" = true ]; then
        local level="$1"
        local message="$2"
        local timestamp
        timestamp=$(date "+%Y-%m-%d %H:%M:%S")
        mkdir -p "$(dirname "$LOG_FILE")"
        touch "$LOG_FILE"
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    fi
}

check_dependency() {
    if ! command -v "$1" &>/dev/null; then
        display_error "Dependency not found: $1"
        exit 1
    fi
}

################################################################################
# FILE TRASHING
################################################################################
move_to_trash() {
    local file="$1"
    if [ -z "$file" ]; then
        display_error "No file specified for move_to_trash"
        return 1
    fi

    local absolute_path
    absolute_path=$(cd "$(dirname "$file")" && pwd)/$(basename "$file")

    # More reliable approach to move to trash:
    osascript <<EOF
        try
            tell application "Finder"
                move POSIX file "$absolute_path" to trash
            end tell
        on error errMsg number errNum
            do shell script "echo 'Error: " & errMsg & " (Error Number: " & errNum & ")' >&2"
        end try
EOF

    if [ $? -eq 0 ]; then
        log "INFO" "Moved file to trash: $file"
        echo "Moved file to trash: $file"
    else
        display_error "Failed to move file to trash: $file"
        return 1
    fi
}

################################################################################
# VIDEO INFORMATION & BITRATE CALC
################################################################################
get_video_info() {
    local source="$1"
    local info
    info=$(ffprobe -v quiet -print_format json -show_format -show_streams "$source")

    local width height duration bitrate filesize
    width=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .width')
    height=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .height')
    duration=$(echo "$info" | jq -r '.format.duration')
    bitrate=$(echo "$info" | jq -r '.format.bit_rate')
    filesize=$(stat -f %z "$source")

    # Default fallback values
    width=${width:-0}
    height=${height:-0}
    duration=${duration:-0}
    bitrate=${bitrate:-0}

    # Log or echo info
    log "INFO" "Video info for '$source' => Width: $width, Height: $height, Duration: $duration, Bitrate: $bitrate, Filesize: $filesize"

    echo "$width $height $duration $bitrate $filesize"
}

calculate_optimal_bitrate() {
    local width="$1"
    local height="$2"
    local current_bitrate="$3"
    local filesize="$4"
    local duration="$5"

    local pixels=$((width * height))
    local new_bitrate

    # Basic resolution thresholds
    if [ "$pixels" -gt 2073600 ]; then
        new_bitrate=5000000     # for 1080p+
    elif [ "$pixels" -gt 921600 ]; then
        new_bitrate=3000000     # for 720p
    else
        new_bitrate=1500000     # for lower resolutions
    fi

    # If current bitrate is lower, use it
    if [ "$current_bitrate" -ne 0 ] && [ "$current_bitrate" -lt "$new_bitrate" ]; then
        new_bitrate=$current_bitrate
    fi

    # Further reduce based on filesize and duration
    if [ "$duration" != "0" ]; then
        local target_bitrate
        target_bitrate=$(awk -v fs="$filesize" -v dur="$duration" 'BEGIN { printf "%d", fs * 8 * 80 / (dur * 100) }')
        if [ "$target_bitrate" -lt "$new_bitrate" ]; then
            new_bitrate=$target_bitrate
        fi
    fi

    # Minimum
    [ "$new_bitrate" -lt 100000 ] && new_bitrate=100000

    # Round to nearest 100k
    new_bitrate=$(((new_bitrate + 50000) / 100000 * 100000))

    log "INFO" "Calculated optimal bitrate: $new_bitrate"
    echo "$new_bitrate"
}

################################################################################
# FFmpeg Command Construction
################################################################################
build_ffmpeg_command() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local output_format="$5"
    local new_bitrate="$6"
    local thread_count=8

    # Common filters/arguments
    local video_filter="scale=trunc(iw/2)*2:trunc(ih/2)*2"
    local ffmpeg_args="-maxrate $new_bitrate -bufsize $((new_bitrate * 2))"
    ffmpeg_args+=" -threads $thread_count -movflags +faststart -pix_fmt yuv420p"

    # Decide on codec settings
    case "$codec" in
        h264)
            if [ "$USE_GPU" = true ] && command -v nvidia-smi &>/dev/null; then
                ffmpeg_args="-c:v h264_nvenc -preset slow -rc:v vbr_hq $ffmpeg_args"
                video_filter="scale_npp=w=trunc(iw/2)*2:h=trunc(ih/2)*2"
            else
                ffmpeg_args="-c:v libx264 -preset slower -crf 23 -profile:v high -level:v 4.2 $ffmpeg_args"
            fi
            ;;
        hevc)
            if [ "$USE_GPU" = true ] && command -v nvidia-smi &>/dev/null; then
                ffmpeg_args="-c:v hevc_nvenc -preset slow -rc:v vbr_hq $ffmpeg_args"
                video_filter="scale_npp=w=trunc(iw/2)*2:h=trunc(ih/2)*2"
            else
                ffmpeg_args="-c:v libx265 -preset medium -crf 28 -tag:v hvc1 -profile:v main $ffmpeg_args"
            fi
            ;;
        av1)
            ffmpeg_args="-c:v libaom-av1 -crf 30 -b:v 0 -strict experimental $ffmpeg_args"
            ;;
        *)
            display_error "Invalid codec: $codec"
            exit 1
            ;;
    esac

    # Format-specific
    case "$output_format" in
        mp4|m4v) # MP4-based
            # remains as is
            ;;
        mkv)
            ffmpeg_args="$ffmpeg_args -f matroska"
            ;;
        webm)
            if [ "$codec" != "av1" ]; then
                ffmpeg_args="-c:v libvpx-vp9 -crf 30 -b:v 0 -f webm"
            else
                ffmpeg_args="$ffmpeg_args -f webm"
            fi
            ;;
        mov)
            # QuickTime container
            ;;
        *)
            display_error "Invalid output format: $output_format"
            exit 1
            ;;
    esac

    local suffix
    case "$operation" in
        refine)      suffix="-re" ;;
        amv)         suffix="-am" ;;
        loop_audio)  suffix="-la" ;;
        audiofy)     suffix="-au" ;;
        *)
            display_error "Invalid operation: $operation"
            exit 1
            ;;
    esac

    local output="${source%.*}${suffix}.${output_format}"

    local ffmpeg_cmd="ffmpeg -i \"$source\""

    case "$operation" in
        refine)
            ffmpeg_cmd+=" $ffmpeg_args -vf \"$video_filter\" -c:a aac -b:a 128k"
            ;;
        amv|loop_audio)
            ffmpeg_cmd+=" -stream_loop -1 -i \"$param\" -shortest -map 0:v:0"
            ffmpeg_cmd+=" $ffmpeg_args -vf \"$video_filter\" -map 1:a:0 -c:a aac -b:a 192k"
            ;;
        audiofy)
            ffmpeg_cmd="ffmpeg -loop 1 -framerate 25 -i \"$source\" -i \"$param\""
            ffmpeg_cmd+=" $ffmpeg_args -vf \"$video_filter\""
            ffmpeg_cmd+=" -map 0:v -map 1:a -c:a aac -b:a 192k -shortest"
            ;;
    esac

    ffmpeg_cmd+=" -y \"$output\""

    echo "$ffmpeg_cmd"
}

################################################################################
# MAIN VIDEO PROCESSING
################################################################################
process_video() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local output_format="$5"

    # Gather video info
    local video_info
    video_info=$(get_video_info "$source")
    local width height duration bitrate filesize
    read -r width height duration bitrate filesize <<< "$video_info"

    # Calculate new bitrate
    local new_bitrate
    new_bitrate=$(calculate_optimal_bitrate "$width" "$height" "$bitrate" "$filesize" "$duration")

    # Build FFmpeg command
    local cmd
    cmd=$(build_ffmpeg_command "$source" "$operation" "$param" "$codec" "$output_format" "$new_bitrate")
    log "INFO" "FFmpeg command: $cmd"

    # Run FFmpeg
    if ! eval "$cmd" >> "$LOG_FILE" 2>&1; then
        display_error "FFmpeg command failed. Check log file for details."
        exit 1
    fi

    # Validate output
    local output="${source%.*}-$(echo $operation | cut -c1,2).${output_format}"  # e.g. myvideo-re.mp4
    if [ ! -s "$output" ]; then
        display_error "Output file is empty or missing."
        exit 1
    fi

    # Trash original if requested
    if [ "$TRASH_MODE" = true ]; then
        move_to_trash "$source"
    fi
}

################################################################################
# USAGE
################################################################################
usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] <operation> <source> [additional_file]

Operations:
  refine, amv, loop_audio, audiofy

Options:
  -v              Verbose logging
  -c <codec>      Codec: h264, hevc, av1 (default: hevc)
  -g              Use GPU if available
  -f <format>     Container: mp4, m4v, mkv, webm, mov (default: mov)
  -l              Enable logging
  -t              Trash original file after processing
EOF
}

################################################################################
# ENTRYPOINT
################################################################################
main() {
    local codec="hevc"
    local output_format="mov"

    while getopts ":vc:gf:lt" opt; do
        case "$opt" in
            v ) ENABLE_LOGGING=true ;;
            c ) codec=$OPTARG ;;
            g ) USE_GPU=true ;;
            f ) output_format=$OPTARG ;;
            l ) ENABLE_LOGGING=true ;;
            t ) TRASH_MODE=true ;;
            \? )
                display_error "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
            : )
                display_error "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    local operation="$1"
    local source="$2"
    local param="$3"

    # Basic checks
    [ -z "$operation" ] && { display_error "No operation specified."; usage; exit 1; }
    [ -z "$source" ] && { display_error "No source file specified."; usage; exit 1; }
    [ ! -f "$source" ] && { display_error "Source file not found: $source"; exit 1; }

    case "$operation" in
        refine)
            ;;
        amv|loop_audio|audiofy)
            [ -z "$param" ] && { display_error "Additional file not specified for '$operation'."; usage; exit 1; }
            [ ! -f "$param" ] && { display_error "Additional file not found: $param"; exit 1; }
            ;;
        *)
            display_error "Invalid operation: $operation"
            usage
            exit 1
            ;;
    esac

    log "INFO" "Starting $operation on $source with codec=$codec format=$output_format GPU=$USE_GPU"
    process_video "$source" "$operation" "$param" "$codec" "$output_format"
    log "INFO" "Operation completed successfully."

    if [ "$ENABLE_LOGGING" = true ]; then
        echo "Log file is at $LOG_FILE"
    fi
}

main "$@"