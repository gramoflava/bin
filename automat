#!/bin/sh
set -x
f="$1"
echo "$1"
if sips -g hasAlpha "$f" | grep -q "hasAlpha: yes"; then
   echo moving "$f"
   mv "$f" ~/Downloads/
fi



MSG_REQ_FFMPEG="Error. No 'ffmpeg' found. Try \`brew install ffmpeg' or updating your \$PATH."
MSG_ERR_NOT_FOUND="Error. Source file not found:"

PRJESR=~/bin/realesrgan-ncnn-vulkan-20220424-macos

depends() {
    which -s $1 &>/dev/null
}

is_png() {
    [[ "$1" =~ ^[Pp][Nn][Gg]$ ]]
}

find_or_die() {
    [ -f "$1" ] || { echo "$MSG_ERR_NOT_FOUND" "$1" >&2; exit 1; }
}

esrgan_art() {
    # Optimizing art for at least 3072 px in height at original quality,
    # and store as a jpeg

    local original="$1"
    local rm_original="$2" # Expects "rm" to remove original after upscaling
    local name="${original%.*}"
    local ext="${original##*.}"
    local target_height=3072 # A chozen image height to optimize

    if [ "$rm_original" != "rm" ]; then
        rm -f "$name~.$ext"
        cp "$original" "$name~.$ext"
   fi

    local height=$(sips -g pixelHeight "$original" | sed -En 's/^.*pixelHeight: *([0-9]+)$/\1/gp')

    local scale_factor=1

    if   [ "$height" -lt $(($target_height/3)) ]; then
        scale_factor=4
   elif [ "$height" -lt $(($target_height/2)) ]; then
        scale_factor=3
   elif [ "$height" -lt "$target_height" ]; then
        scale_factor=2
   fi

    local source="$original"
    if [ "$scale_factor" -ne 1 ]; then
        source="$name.esrgan.$(xxd -l2 -ps /dev/urandom).png"
        "$PRJESR/realesrgan-ncnn-vulkan" \
            -m "$PRJESR/models" -f png \
            -i "$original" \
            -s "$scale_factor" \
            -o "$source"

        height=$(sips -g pixelHeight "$source" | sed -En 's/^.*pixelHeight: ([0-9]+)$/\1/gp')
        if [ "$height" -lt "$target_height" ]; then
            esrgan_art "$source" rm
         fi
   fi

    sips "$source" -s format jpeg --resampleHeight "$target_height" --out "$name.h${target_height}.jpg"

    if [ "$rm_original" = "rm" ]; then
        rm -f "$original"
   fi

    rm -f "$source"
    mv "$name.h${target_height}.jpg" "$name.jpg"
}

# normalize by size and convert to jpeg
normalize_jpg() {
   local source="$1"
   height=$(sips -g pixelHeight "$source" | sed -En 's/^.*pixelHeight: ([0-9]+)$/\1/gp')
   width=$(sips -g pixelWidth "$source" | sed -En 's/^.*pixelWidth: ([0-9]+)$/\1/gp')
   if sips -g hasAlpha "$f" | grep -q "hasAlpha: no"; then
       sips
   fi
}

usage() {
    depends ffmpeg || echo "$MSG_REQ_FFMPEG" >&2

    cat <<EOT
Usage for images: \`automat -i [art] IMAGE'
Usage for videos: \`automat -v [refine|cw|ccw|amv|voice] MOVIE [ADD-IN]'

Example 1: Simple integration with Automator
======
export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -v refine "\$f"
done

Example 2: Request for parameters
======
read -r -d '' applescriptCode <<'EOF'
    set dialogText to text returned of (display dialog "Denoise level (0-4):" default answer "2")
    return dialogText
EOF
DENOISE=\$(osascript -e "\$applescriptCode");

export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -i denoise "\$f" "\$DENOISE"
done

EOT
}

KIND="$1"
OP="$2"

case "$KIND" in
    -i)
        SOURCE="$3"
        PARAM="$4"

        find_or_die "$SOURCE"

        FN="${SOURCE%.*}"
        EX="${SOURCE##*.}"

        case "$OP" in
            esrgan)
                esrgan_art "${SOURCE}"
            ;;
            photo)
                echo "Not yet implemented."
            ;;
            normalize_image)
                normalize_jpg "${SOURCE}" "${PARAM}"
            ;;
            *)
                usage; exit 1
            ;;
         esac
   ;;
    -v)
        SOURCE="$3"
        PARAM="$4"

        find_or_die "$SOURCE"

        depends ffmpeg || { echo "$MSG_REQ_FFMPEG" >&2; exit 1; }

        FN="${SOURCE%.*}"
        EX="${SOURCE##*.}"

        case "$OP" in
            refine)
                ffmpeg -i "$SOURCE" -vcodec libx264 -profile:v main -level 3.1 -preset medium -crf 23 -x264-params ref=4 -pix_fmt yuv420p -acodec aac -movflags +faststart -max_muxing_queue_size 9999 -y "$FN.refined.mp4"
            ;;
            cw)
                ffmpeg -i "$SOURCE" -vf "transpose=1" -y "$FN.cwd.mp4"
            ;;
            ccw)
                ffmpeg -i "$SOURCE" -vf "transpose=3" -y "$FN.ccwd.mp4"
            ;;
            amv) # full length video, loop audio
                find_or_die "$PARAM"
                ffmpeg  -i "$SOURCE" -stream_loop -1 -i "$PARAM" -shortest -map 0:v:0 -c:v libx264 -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -pix_fmt yuv420p -y "$FN.amvd.mp4"
            ;;
            amvl) # full length audio, loop video
                find_or_die "$PARAM"
                ffmpeg  -stream_loop -1 -i "$SOURCE" -i "$PARAM" -shortest -map 0:v:0 -c:v libx264 -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "$FN.amvld.mp4"
            ;;
            voice)
                find_or_die "$PARAM"
                ffmpeg -i "$SOURCE" -i "$PARAM" -map 0:v -c:v libx264 -tune stillimage -map 1:a -c:a aac -pix_fmt yuv420p -shortest -movflags +faststart "$FN.voiced.mp4"
            ;;
            *)
                usage; exit 1
            ;;
         esac
   ;;
    *)
        usage; exit 1
   ;;
esac
