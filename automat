#!/bin/sh

MSG_REQ_W2X="Error. No waifu2x found. Try \`brew install imxieyi/waifu2x/waifu2x' or updating your \$PATH."
MSG_REQ_FFMPEG="Error. No ffmpeg found. Try \`brew install ffmpeg' or updating your \$PATH."
MSG_ERR_NOT_FOUND="Error. Source file not found:"

depends() {
    which -s $1 &>/dev/null
}

is_png() {
    [[ "$1" =~ ^[Pp][Nn][Gg]$ ]]
}

find_or_die() {
    [ -f "$1" ] || { echo "$MSG_ERR_NOT_FOUND" "$1" >&2; exit 1; }
}

usage() {
    depends waifu2x || echo "$MSG_REQ_W2X" >&2
    depends ffmpeg || echo "$MSG_REQ_FFMPEG" >&2

    cat <<EOT
Usage for images: \`automat -i [upscale|denoise|photoup] IMAGE [DENOISE:0-4]'
Usage for videos: \`automat -v [refine|cw|ccw|amv|voice] MOVIE [ADD-IN]'

Example for Automator integration as Action
export PATH="/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -i upscale "\$f" 3
done

EOT
}

KIND="$1"
OP="$2"

case "$KIND" in
    -i)
        SOURCE="$3"
        DENOIZE="$4"

        depends waifu2x || { echo "$MSG_REQ_W2X" >&2; exit 1; }
        find_or_die "$SOURCE"

        FN="${SOURCE%.*}"
        EX="${SOURCE##*.}"

        case "$OP" in
            upscale)
                if is_png "$EX"; then
                    waifu2x -t a -s 2 -n ${DENOISE:-0} -i "$SOURCE" -o "$FN.upscaled.png"
                else
                    waifu2x -t a -s 2 -n ${DENOISE:-2} -i "$SOURCE" -o "$FN.upscaled.png"
                fi
                sips -s format jpeg "$FN.upscaled.png" --out "$FN.upscaled.jpg" && rm "$FN.upscaled.png"
                ;;
            denoise)
                waifu2x -t a -s 1 -n ${DENOISE:-2} -i "$SOURCE" -o "$FN.denoised.png"
                sips -s format jpeg "$FN.denoised.png" --out "$FN.denoised.jpg" && rm "$FN.denoised.png"
                ;;
            photoup)
                waifu2x -t p -s 2 -n ${DENOISE:-3} -i "$SOURCE" -o "$FN.photoupd.png"
                sips -s format jpeg "$FN.photoupd.png" --out "$FN.photoupd.jpg" && rm "$FN.photoupd.png"
                ;;
            *)
                usage; exit 1
                ;;
        esac
        ;;
    -v)
        SOURCE="$3"
        ADDIN="$4"

        find_or_die "$SOURCE"

        depends ffmpeg || { echo "$MSG_REQ_FFMPEG" >&2; exit 1; }

        FN="${SOURCE%.*}"
        EX="${SOURCE##*.}"

        case "$OP" in
            refine)
                ffmpeg -i "$SOURCE" -vcodec libx264 -profile:v main -DENOIZE 3.1 -preset medium -crf 23 -x264-params ref=4 -pix_fmt yuv420p -acodec aac -movflags +faststart -max_muxing_queue_size 9999 -y "$FN.refined.mp4"
                ;;
            cw)
                ffmpeg -i "$SOURCE" -vf "transpose=1" -y "$FN.cwd.mp4"
                ;;
            ccw)
                ffmpeg -i "$SOURCE" -vf "transpose=3" -y "$FN.ccwd.mp4"
                ;;
            amv)
                find_or_die "$ADDIN"
                ffmpeg -i "$SOURCE" -i "$ADDIN" -map 0:v -c:v libx264 -map 1:a -c:a aac -pix_fmt yuv420p -shortest -movflags +faststart "$FN.amvd.mp4"
                ;;
            voice)
                find_or_die "$ADDIN"
                ffmpeg -i "$SOURCE" -i "$ADDIN" -map 0:v -c:v libx264 -tune stillimage -map 1:a -c:a aac -pix_fmt yuv420p -shortest -movflags +faststart "$FN.voiced.mp4"
                ;;
            *)
                usage; exit 1
                ;;
        esac
        ;;
    *)
        usage; exit 1
        ;;
esac
