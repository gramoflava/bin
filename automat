#!/bin/zsh

# Enable error handling
set -e

# Define log file path at the beginning
log_file=""

# Function to display error messages
display_error() {
    local message="$1"
    echo "Error: $message" >&2
    [ -n "$log_file" ] && log "ERROR" "$message"
}

log() {
    if [ "$enable_logging" = true ]; then
        local level="$1"
        local message="$2"
        local timestamp=$(date "+%Y-%m-%d %H:%M:%S")

        # Ensure the directory for the log file exists
        mkdir -p "$(dirname "$log_file")"

        # Create the log file if it doesn't exist
        touch "$log_file"

        echo "[$timestamp] [$level] $message" >> "$log_file"
    fi
}

check_dependency() {
    if ! command -v "$1" &>/dev/null; then
        display_error "Dependency not found: $1"
        exit 1
    fi
}

find_or_die() {
    if [ ! -f "$1" ]; then
        display_error "Source file not found: $1"
        exit 1
    fi
    log "INFO" "File found: $1"
}

get_video_info() {
    local source="$1"
    local info
    info=$(ffprobe -v quiet -print_format json -show_format -show_streams "$source" 2>> "$log_file")

    local width=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .width')
    local height=$(echo "$info" | jq -r '.streams[] | select(.codec_type=="video") | .height')
    local duration=$(echo "$info" | jq -r '.format.duration')
    local bitrate=$(echo "$info" | jq -r '.format.bit_rate')
    local filesize=$(stat -f%z "$source")

    # Check if any of the values are empty or null, and provide default values
    width=${width:-0}
    height=${height:-0}
    duration=${duration:-0}
    bitrate=${bitrate:-0}

    log "INFO" "Video info - Width: $width, Height: $height, Duration: $duration, Bitrate: $bitrate, Filesize: $filesize"

    echo "$width $height $duration $bitrate $filesize"
}

calculate_optimal_bitrate() {
    local width="$1"
    local height="$2"
    local current_bitrate="$3"
    local filesize="$4"
    local duration="$5"

    # Calculate pixels
    local pixels=$((width * height))

    # Base bitrate on resolution, but aim for lower bitrates
    local new_bitrate
    if [ "$pixels" -gt 2073600 ]; then  # 1080p and above
        new_bitrate=5000000
    elif [ "$pixels" -gt 921600 ]; then  # 720p
        new_bitrate=3000000
    else
        new_bitrate=1500000
    fi

    # If current bitrate is lower and non-zero, use it as a base
    if [ "$current_bitrate" -ne 0 ] && [ "$current_bitrate" -lt "$new_bitrate" ]; then
        new_bitrate=$current_bitrate
    fi

    # Adjust based on current file size and duration, aim for 20% reduction
    # Only apply this if duration is non-zero to avoid division by zero
    if [ "$duration" != "0" ]; then
        local target_bitrate=$((filesize * 8 * 80 / (duration * 100)))
        if [ "$target_bitrate" -lt "$new_bitrate" ]; then
            new_bitrate=$target_bitrate
        fi
    fi

    # Ensure new_bitrate is at least 100000 to avoid issues
    if [ "$new_bitrate" -lt 100000 ]; then
        new_bitrate=100000
    fi

    # Round to nearest 100k
    new_bitrate=$(((new_bitrate + 50000) / 100000 * 100000))

    log "INFO" "Calculated optimal bitrate: $new_bitrate"
    echo "$new_bitrate"
}

process_video() {
    local source="$1"
    local operation="$2"
    local param="$3"
    local codec="$4"
    local use_gpu="$5"
    local output_format="$6"
    local video_info
    video_info=$(get_video_info "$source")
    read -r width height duration bitrate filesize <<< "$video_info"

    local new_bitrate
    new_bitrate=$(calculate_optimal_bitrate "$width" "$height" "$bitrate" "$filesize" "$duration")

    # Calculate optimal thread count
    local thread_count=8

    # Define the obfuscated suffixes
    local suffix
    case "$operation" in
        refine)
            suffix="-re"
            ;;
        amv)
            suffix="-am"
            ;;
        loop_audio)
            suffix="-la"
            ;;
        audiofy)
            suffix="-au"
            ;;
        *)
            display_error "Invalid operation: $operation"
            exit 1
            ;;
    esac

    # Construct the output filename with the new suffix and format
    local output="${source%.*}${suffix}.${output_format}"

    local ffmpeg_common_options=""
    local video_filter="scale=trunc(iw/2)*2:trunc(ih/2)*2"

    # Set codec-specific options
    case "$codec" in
        h264)
            if [ "$use_gpu" = "true" ] && command -v nvidia-smi &>/dev/null; then
                ffmpeg_common_options="-c:v h264_nvenc -preset slow -rc:v vbr_hq"
                video_filter="scale_npp=w=trunc(iw/2)*2:h=trunc(ih/2)*2"
            else
                ffmpeg_common_options="-c:v libx264 -preset slower -crf 23"
            fi
            ffmpeg_common_options+=" -profile:v high -level:v 4.2"
            ;;
        hevc)
            if [ "$use_gpu" = "true" ] && command -v nvidia-smi &>/dev/null; then
                ffmpeg_common_options="-c:v hevc_nvenc -preset slow -rc:v vbr_hq"
                video_filter="scale_npp=w=trunc(iw/2)*2:h=trunc(ih/2)*2"
            else
                ffmpeg_common_options="-c:v libx265 -preset medium -crf 28"
            fi
            ffmpeg_common_options+=" -tag:v hvc1 -profile:v main"
            ;;
        av1)
            ffmpeg_common_options="-c:v libaom-av1 -crf 30 -b:v 0 -strict experimental"
            ;;
        *)
            display_error "Invalid codec: $codec"
            exit 1
            ;;
    esac

    ffmpeg_common_options+=" -maxrate $new_bitrate -bufsize $((new_bitrate * 2))"
    ffmpeg_common_options+=" -threads $thread_count -movflags +faststart -pix_fmt yuv420p"

    # Set format-specific options
    case "$output_format" in
        mp4|m4v)
            # MP4 settings (already set in ffmpeg_common_options)
            ;;
        mkv)
            ffmpeg_common_options+=" -f matroska"
            ;;
        webm)
            if [ "$codec" != "av1" ]; then
                ffmpeg_common_options="-c:v libvpx-vp9 -crf 30 -b:v 0"
            fi
            ffmpeg_common_options+=" -f webm"
            ;;
        mov)
            # QuickTime settings (similar to MP4)
            ;;
        *)
            display_error "Invalid output format: $output_format"
            exit 1
            ;;
    esac

    local ffmpeg_command="ffmpeg -i \"$source\""

    case "$operation" in
        refine)
            ffmpeg_command+=" $ffmpeg_common_options"
            ffmpeg_command+=" -vf \"$video_filter\""
            ffmpeg_command+=" -c:a aac -b:a 128k"
            ;;
        amv)
            ffmpeg_command+=" -stream_loop -1 -i \"$param\" -shortest -map 0:v:0"
            ffmpeg_command+=" $ffmpeg_common_options"
            ffmpeg_command+=" -vf \"$video_filter\""
            ffmpeg_command+=" -map 1:a:0 -c:a aac -b:a 192k"
            ;;
        loop_audio)
            ffmpeg_command+=" -stream_loop -1 -i \"$param\" -shortest -map 0:v:0"
            ffmpeg_command+=" $ffmpeg_common_options"
            ffmpeg_command+=" -vf \"$video_filter\""
            ffmpeg_command+=" -map 1:a:0 -c:a aac -b:a 192k"
            ;;
        audiofy)
            ffmpeg_command+=" -i \"$param\" -map 0:v"
            ffmpeg_command+=" $ffmpeg_common_options"
            ffmpeg_command+=" -vf \"$video_filter\""
            ffmpeg_command+=" -map 1:a -c:a aac -b:a 192k -shortest"
            ;;
        *)
            display_error "Invalid operation: $operation"
            exit 1
            ;;
    esac

    ffmpeg_command+=" -y \"$output\""

    log "INFO" "Executing FFmpeg command: $ffmpeg_command"

    # Execute FFmpeg command and capture output
    if ! eval "$ffmpeg_command" >> "$log_file" 2>&1; then
        display_error "FFmpeg command failed. Check log file for details."
        exit 1
    fi

    # Check if output file was created and has a non-zero size
    if [ ! -s "$output" ]; then
        display_error "Output file was not created or is empty. Check log file for details."
        exit 1
    fi

    # Log output file info
    local output_info
    output_info=$(get_video_info "$output")
    log "INFO" "Output file info: $output_info"
}

usage() {
    cat <<EOT
Usage: automat [-v] [-c codec] [-g] [-f format] [-l] [operation] [source_file] [additional_file]

Process videos with various operations.

Options:
  -v              Display verbose output and log file information
  -c codec        Specify codec (h264, hevc, av1) (default: hevc)
  -g              Use GPU acceleration (if available)
  -f format       Specify output format (mp4, mkv, webm, mov, m4v) (default: mov)
  -l              Enable logging (default: disabled)

Operations:
  refine        Refine video quality (default bitrate, no audio changes)
  amv           Replace original audio track in the video with external
  loop_audio    Loop audio over video
  audiofy       Combine image or video with a different audio track

Source File:
  Path to the source video file. Required for all operations.

Additional File (for amv, loop_audio, and audiofy):
  Path to the additional audio file. Only required for amv, loop_audio, and audiofy operations.

Example: automat -c hevc -g -f mkv -l refine my_video.mp4
         automat -v -c av1 -f webm amv my_video.mp4 background_music.mp3

Example usage within an Automator script (Quick Action, Run Shell Script, Pass input as arguments):
source ~/.zshrc
for f in "$@"; do
    ~/bin/automat -v -c hevc -g -f mkv -l refine "$f"
done

Note: This script is intended for advanced users who have a good understanding of video processing and FFmpeg commands.
EOT
}

main() {
    local verbose=false
    local codec="hevc"
    local use_gpu=false
    local output_format="mov"
    local enable_logging=false

    while getopts ":vc:gf:l" opt; do
        case ${opt} in
            v )
                verbose=true
                ;;
            c )
                codec=$OPTARG
                ;;
            g )
                use_gpu=true
                ;;
            f )
                output_format=$OPTARG
                ;;
            l )
                enable_logging=true
                ;;
            \? )
                display_error "Invalid option: $OPTARG"
                usage
                exit 1
                ;;
            : )
                display_error "Invalid option: $OPTARG requires an argument"
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND -1))

    local operation="$1"
    local source="$2"
    local param="$3"

    # Set up logging
    if [ "$enable_logging" = true ]; then
        log_file="${source%.*}.log"
    else
        log_file="/dev/null"
    fi

    # Check dependencies
    check_dependency ffmpeg
    check_dependency jq

    # Validate input
    [ -z "$operation" ] && { display_error "Operation not specified"; usage; exit 1; }
    [ -z "$source" ] && { display_error "Source file not specified"; usage; exit 1; }
    find_or_die "$source"

    case "$operation" in
        refine)
            ;;
        amv|loop_audio|audiofy)
            [ -z "$param" ] && { display_error "Additional file not specified for $operation operation"; usage; exit 1; }
            find_or_die "$param"
            ;;
        *)
            display_error "Invalid operation: $operation"
            usage
            exit 1
            ;;
    esac

    log "INFO" "Starting $operation operation on $source with codec $codec (GPU: $use_gpu) and output format $output_format"
    process_video "$source" "$operation" "$param" "$codec" "$use_gpu" "$output_format"
    log "INFO" "Operation completed successfully"

    if [ "$verbose" = true ]; then
        if [ "$enable_logging" = true ]; then
            echo "Log file: $log_file"
            cat "$log_file"
        else
            echo "Logging is disabled. Use -l option to enable logging."
        fi
    fi
}

main "$@"