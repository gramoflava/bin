#!/bin/zsh
set -e

MSG_REQ_FFMPEG="Error. No 'ffmpeg' found. Try \`brew install ffmpeg\` or updating your \$PATH."
MSG_ERR_NOT_FOUND="Error. Source file not found:"

log_file=""

log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    
    # Ensure the directory for the log file exists
    mkdir -p "$(dirname "$log_file")"
    
    # Create the log file if it doesn't exist
    touch "$log_file"
    
    echo "[$timestamp] [$level] $message" >> "$log_file"
}

check_dependency() {
    if ! command -v "$1" &>/dev/null; then
        [ -n "$log_file" ] && log "ERROR" "Dependency not found: $1"
        echo "$MSG_REQ_FFMPEG" >&2
        exit 1
    fi
}

find_or_die() {
    if [ ! -f "$1" ]; then
        [ -n "$log_file" ] && log "ERROR" "Source file not found: $1"
        echo "$MSG_ERR_NOT_FOUND $1" >&2
        exit 1
    fi
}

refine_video() {
    local source="$1"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "$source")

    # If bitrate is not found, not a number, or is 0, try to estimate it from file size and duration
    if ! [[ "$bitrate" =~ ^[0-9]+$ ]] || [ "$bitrate" -eq 0 ]; then
        local filesize=$(stat -f%z "$source")
        local duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$source")
        
        # Check if duration is a valid number
        if [[ "$duration" =~ ^[0-9]+([.][0-9]+)?$ ]] && (( $(echo "$duration > 0" | bc -l) )); then
            bitrate=$(echo "scale=0; 8 * $filesize / $duration" | bc)
        fi
    fi

    # If bitrate is still not a valid number or is 0, set a default value (e.g., 1.5Mbps)
    if ! [[ "$bitrate" =~ ^[0-9]+$ ]] || [ "$bitrate" -eq 0 ]; then
        bitrate=1500000
    fi

    # Re-encode the video using H.264 codec with hardware acceleration
    ffmpeg -i "$source" \
        -vcodec h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) \
        -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -pix_fmt yuv420p \
        -acodec aac -b:a 128k -movflags +faststart \
        -y "${source%.*}.refined.mp4"
}

enhance_video() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -i "$source" \
        -stream_loop -1 -i "$param" -shortest -map 0:v:0 \
        -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) \
        -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "${source%.*}.enhanced.mp4"
}

loop_audio() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -stream_loop -1 -i "$source" -i "$param" -shortest -map 0:v:0 \
        -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) \
        -map 1:a:0 -c:a aac -pix_fmt yuv420p -movflags +faststart -y "${source%.*}.audio_looped.mp4"
}

combine_audio() {
    local source="$1"
    local param="$2"
    find_or_die "$param"
    
    # Get the current bitrate of the input video
    local bitrate
    bitrate=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of csv=p=0 "$source" | grep -o '[0-9]\+')

    # If bitrate is not found, set a default value (e.g., 1.5Mbps)
    if [ -z "$bitrate" ]; then
        bitrate=1500000
    fi

    ffmpeg -i "$source" -i "$param" -map 0:v \
        -c:v h264_videotoolbox -b:v "$bitrate" -maxrate "$bitrate" -bufsize $((bitrate / 2)) -tune stillimage \
        -map 1:a -c:a aac -pix_fmt yuv420p -shortest -movflags +faststart "${source%.*}.combined_audio.mp4"
}

usage() {
    check_dependency ffmpeg

    cat <<EOT
Usage for videos: \`automat -v [refine|enhance|loop_audio|combine_audio|add_voice] MOVIE [ADD-IN]'

Example 1: Simple integration with Automator
======
export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -v refine "\$f"
done

Example 2: Enhance video with background music
======
export PATH="/opt/homebrew/bin:/usr/local/bin:\$PATH"
for f in "\$@"
do
    ~/bin/automat -v enhance "\$f" "background_music.mp3"
done
EOT
}

main() {
    local kind="$1"
    local op="$2"

    case "$kind" in
        -v)
            local source="$3"
            local param="$4"

            # Set up logging first
            log_file="${source%.*}.log"

            find_or_die "$source"
            check_dependency ffmpeg
            check_dependency jq

            log "INFO" "Starting script execution for $op operation on $source"

            case "$op" in
                refine)
                    refine_video "$source"
                ;;
                enhance)
                    enhance_video "$source" "$param"
                ;;
                loop_audio)
                    loop_audio "$source" "$param"
                ;;
                combine_audio)
                    combine_audio "$source" "$param"
                ;;
                *)
                    log "ERROR" "Invalid operation: $op"
                    usage
                    exit 1
                ;;
            esac

            log "INFO" "Script execution completed"
        ;;
        *)
            echo "Error: Invalid kind: $kind" >&2
            usage
            exit 1
        ;;
    esac
}

main "$@"